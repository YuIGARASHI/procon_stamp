using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using StampLib.algorithm;
using StampLib.model;
using StampLib.util;
// using Google.OrTools.LinearSolver;
using Google.OrTools.Sat;


namespace Experiment
{
    class Program
    {
        static void Main(string[] args)
        {
            var experiment_fiji = new ExperimentsFujimoto();
            experiment_fiji.TestFieldDivider();
            // var experiment = new ExperimentsIgarashi();
            // experiment.SolvSmallProblemByOrTools();
        }
    }

    class Shape
    {
        // 星形
        public static string star

        // 縦14,横10の正方形
        public static string rect = "27;20;000000000000000000000000000000000000000000000000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        // ハート
        public static string heart

        public static string question_2_07_01 = "25;25;0000000000111110000000000000000000011111000000000000000000011111110000000000000000001111111000000000000000000111111100000000000000000011111111000000000000001111111111111000000011111111111111111111111011111111111111111111111111111111111111111111111111011111111111111111111111000111111111111111111111100001111111111111111111000000011111111111111111000000000111111111111111000000000001111111111111000000000001111111111111110000000000111111111111111000000000011111111111111100000000001111111111111110000000001111111111111111100000000111111110111111110000000011111100000111111000000001111100000001111100000000011100000000011100000";
    }

    class ExperimentsIgarashi
    {
        /// <summary>
        /// 指定したパス配下にある問題をすべて読みこみ、スタンプを出力する
        /// </summary>
        public void PrintSomeInstances()
        {
            IO io = new IO();
            List<Instance> instance_list = io.InputProblemFromFolderPath("..\\..\\data");
            foreach ( Instance instance in instance_list )
            {
                Console.WriteLine(">>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>> Stamps");
                short count = 0;
                foreach ( Stamp stamp in instance.GetOriginalStampObjectList() )
                {
                    Console.WriteLine("\n>>>>>>>>>>>>>>>>>>>>>>>> Stamp" + (count++) + "\n");
                    stamp.Print();

                    // スタンプの数が多いと表示するのが大変なので、1つの問題につき最大5つまで
                    if ( count > 5 )
                    {
                        break;
                    }
                }
            }
        }

        /// <summary>
        /// Google or-toolsのサンプルプログラム
        /// https://developers.google.com/optimization/introduction/dotnet?hl=ja
        /// </summary>
        public void OrToolsSimpleLpProgram()
        {
            /*
            // Create the linear solver with the GLOP backend.
            Solver solver = Solver.CreateSolver("SimpleLpProgram", "GLOP_LINEAR_PROGRAMMING");

            // Create the variables x and y.
            Variable x = solver.MakeNumVar(0.0, 1.0, "x");
            Variable y = solver.MakeNumVar(0.0, 2.0, "y");

            Console.WriteLine("Number of variables = " + solver.NumVariables());

            // Create a linear constraint, 0 <= x + y <= 2.
            Google.OrTools.LinearSolver.Constraint ct = solver.MakeConstraint(0.0, 2.0, "ct");
            ct.SetCoefficient(x, 1);
            ct.SetCoefficient(y, 1);

            Console.WriteLine("Number of constraints = " + solver.NumConstraints());

            // Create the objective function, 3 * x + y.
            Objective objective = solver.Objective();
            objective.SetCoefficient(x, 3);
            objective.SetCoefficient(y, 1);
            objective.SetMaximization();

            solver.Solve();

            Console.WriteLine("Solution:");
            Console.WriteLine("Objective value = " + solver.Objective().Value());
            Console.WriteLine("x = " + x.SolutionValue());
            Console.WriteLine("y = " + y.SolutionValue());
            */
        }

        public void SimpleSatProgram()
        {
            // Creates the model.
            CpModel model = new CpModel();

            // Creates the variables.
            int num_vals = 3;

            IntVar x = model.NewIntVar(0, num_vals - 1, "x");
            IntVar y = model.NewIntVar(0, num_vals - 1, "y");
            IntVar z = model.NewIntVar(0, num_vals - 1, "z");

            // Creates the constraints.
            model.Add(x != y);

            // Creates a solver and solves the model.
            CpSolver solver = new CpSolver();
            CpSolverStatus status = solver.Solve(model);

            if (status == CpSolverStatus.Feasible)
            {
                Console.WriteLine("x = " + solver.Value(x));
                Console.WriteLine("y = " + solver.Value(y));
                Console.WriteLine("z = " + solver.Value(z));
            }
        }

        /// <summary>
        /// or-toolsの検証
        /// 小さいサイズの問題を解けるかどうか試しにやってみる
        /// </summary>
        public void SolvSmallProblemByOrTools()
        {
            // フィールドとスタンプの生成
            int field_size = 64; // 今回の例では正方形なので縦横共通
            string field_str = Shape.star;
            int stamp_size = 4;　// 今回の例では正方形なので縦横共通
            string stamp_str = stamp_size.ToString() + ";" + stamp_size.ToString() + ";" +
                               "1111"  +
                               "0101"  + 
                               "0110" +
                               "1110";
            Field field = new Field();
            field.SetTargetField(field_str);
            Stamp stamp = new Stamp(0, stamp_str);

            // CpModelに変数を追加
            CpModel model = new CpModel();
            Dictionary<Tuple<int,int>,IntVar> stamp_variables = new Dictionary<Tuple<int, int>, IntVar>();
            Dictionary<Tuple<int, int>, IntVar> field_variables = new Dictionary<Tuple<int, int>, IntVar>();
            // スタンプ変数
            for ( int y = (stamp_size - 1) * (-1); y < field_size; ++y)
            {
                for (int x = (stamp_size - 1) * (-1); x < field_size; ++x)
                {
                    string name = "stamp_" + y.ToString() + "_" + x.ToString();
                    stamp_variables[new Tuple<int, int>(y, x)] = model.NewBoolVar(name);
                }
            }
            // フィールド変数
            for (int y = 0; y < field_size; ++y )
            {
                for (int x = 0; x < field_size; ++x)
                {
                    string name = "field" + y.ToString() + "_" + x.ToString();
                    field_variables[new Tuple<int, int>(y, x)] = model.NewBoolVar(name);
                }
            }


            List<Tuple<short, short>> field_black_cell_coordinates = field.GetBlackCellCoordinates();
            foreach ( var field_cell in field_black_cell_coordinates )
            { 
                List<IntVar> var_take_xors = new List<IntVar>();
                List<Tuple<short, short>> stamp_black_cell_coordinates = stamp.GetBlackCellCoordinate();
                foreach ( var stamp_cell in stamp_black_cell_coordinates )
                {
                    int y_ind = field_cell.Item1 - stamp_cell.Item1;
                    int x_ind = field_cell.Item2 - stamp_cell.Item2;
                    var_take_xors.Add(stamp_variables[new Tuple<int, int>(y_ind, x_ind)]);
                }
                model.AddBoolXor(var_take_xors);
            }

            List<Tuple<short, short>> field_white_cell_coordinates = field.GetWhiteCellCoordinates();
            foreach ( var field_cell in field_white_cell_coordinates )
            {
                List<IntVar> var_take_xors = new List<IntVar>();
                List<Tuple<short, short>> stamp_black_cell_coordinates = stamp.GetBlackCellCoordinate();
                foreach (var stamp_cell in stamp_black_cell_coordinates)
                {
                    int y_ind = field_cell.Item1 - stamp_cell.Item1;
                    int x_ind = field_cell.Item2 - stamp_cell.Item2;
                    var_take_xors.Add(stamp_variables[new Tuple<int, int>(y_ind, x_ind)]);

                }
                
                // target fieldの情報を制約に追加.
                List<IntVar> field_variable = new List<IntVar>();
                field_variable.Add(field_variables[new Tuple<int, int>(field_cell.Item1, field_cell.Item2)]);
                model.AddBoolAnd(field_variable);

                var_take_xors.Add(field_variables[new Tuple<int, int>(field_cell.Item1, field_cell.Item2)]);
                model.AddBoolXor(var_take_xors);
            }

            // 求解
            CpSolver solver = new CpSolver();
            solver.StringParameters = "max_time_in_seconds:5.0";
            Console.WriteLine("start!!\n");
            CpSolverStatus status = solver.Solve(model);

            // 解の検証
            Console.WriteLine("Pressing stamp is:");
            if (status == CpSolverStatus.Feasible)
            {
                for (int y = (stamp_size - 1) * (-1); y < field_size; ++y)
                {
                    for (int x = (stamp_size - 1) * (-1); x < field_size; ++x)
                    {
                        Tuple<int, int> cur_pos = new Tuple<int, int>(y, x);
                        if (solver.Value(stamp_variables[cur_pos]) == 1)
                        {
                            field.PressStamp(stamp, (short)x, (short)y);
                            Console.Write("1");
                        }
                        else
                        {
                            Console.Write("0");
                        }
                    }
                    Console.WriteLine();
                }

                Console.WriteLine("\nmy_field is :");
                field.PrintMyself();
                Console.WriteLine("\ntarget_field is :");
                field.PrintTargetField();
            }
        }
    }

    class ExperimentsFujimoto
    {
        // 縦10,横20の長方長
        public static string sample_field = "20;10;00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";

        public void TestFieldDivider()
        {
            #region 【テスト】FieldDivider

            Field temp_field = new Field();
            temp_field.SetTargetField(sample_field);
            List<Tuple<Tuple<short, short>, Tuple<short, short>>> temp_start_end_position;
            // y軸、x軸両方割り切れるパターン
            // →テストOK
            //FieldDivider temp_fielddivider = new FieldDivider(2, 4);

            // x軸だけ余りが発生するパターン
            // →テストOK
            //FieldDivider temp_fielddivider = new FieldDivider(2, 3);

            // y軸だけ余りが発生するパターン
            // →テストOK
            //FieldDivider temp_fielddivider = new FieldDivider(3, 4);

            // y軸、x軸両方余りが発生するパターン
            // →テストOK
            FieldDivider temp_fielddivider = new FieldDivider(3, 3, temp_field);

            temp_fielddivider.CalcStartEndPosition(temp_field.GetYSize(), temp_field.GetXSize());
            temp_start_end_position = temp_fielddivider.GetStartEndPosition();

            Console.WriteLine("配列の長さ：" + temp_start_end_position.Count().ToString());
            
            foreach (Tuple<Tuple<short, short>, Tuple<short, short>> tuple in temp_start_end_position)
            {
                Console.WriteLine(tuple);
            }

            #endregion
        }

    }
}
