using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace experimnt
{
    class Program
    {
        static void Main(string[] args)
        {
            const int field_x_size = 100;
            const int field_y_size = 100;

            Stamp stamp = new Stamp(Shape.star);
            Field field = new Field(field_x_size, field_y_size);

            System.Random r = new System.Random(1000);
            for ( int count = 0; count < 1000000; ++count )
            {
                int slide_x = r.Next(stamp.x_size * (-1), field_x_size);
                int slide_y = r.Next(stamp.y_size * (-1), field_y_size);
                field.PressStamp(stamp, slide_x, slide_y);


                // 区切り線の出力
                Console.WriteLine("\n\n\n\n\n");
                for (int i = 0; i < field_x_size; ++i)
                {
                    Console.Write(" >");
                }
                Console.WriteLine("\n\n\n\n\n");

                field.PrintMyField();
            }
        }
    }

    class Shape
    {
        // 星形
        public static string star

        // 縦14,横10の正方形
        public static string rect = "27;20;000000000000000000000000000000000000000000000000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000011111111110000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    }

    class Field
    {
        private bool[,] my_filed;
        private int x_size;
        private int y_size;

        public Field(int x_size, int y_size)
        {
            this.x_size = x_size;
            this.y_size = y_size;
            this.my_filed = new bool[y_size, x_size];
            for ( int y_ind = 0; y_ind < y_size; ++y_ind )
            {
                for ( int x_ind = 0; x_ind < x_size; ++x_ind )
                {
                    this.my_filed[y_ind, x_ind] = false;
                }
            }
        }

        // stamp をスライドしてからを my field に押す
        public void PressStamp(Stamp stamp, int x_slide, int y_slide)
        {
            foreach ( var coordinate in stamp.GetBlackCellCoordinates() )
            {
                int y = y_slide + coordinate.Item1;
                int x = x_slide + coordinate.Item2;
                
                // スタンプを押す場所が my field の外なら continue
                if ( y < 0 || y >= this.y_size || x < 0 || x >= this.x_size)
                {
                    continue;
                }

                this.my_filed[y, x] = !my_filed[y, x];
            }
        }

        // my fieldを標準出力に表示する
        public void PrintMyField()
        {
            for (int y_ind = 0; y_ind < y_size; ++y_ind)
            {
                for (int x_ind = 0; x_ind < x_size; ++x_ind)
                {
                    if ( this.my_filed[y_ind, x_ind] )
                    {
                        Console.Write(" *");
                    }
                    else
                    {
                        Console.Write("  ");
                    }
                }
                Console.WriteLine();
            }
        }

        public int GetBlackCellNum()
        {
            int count = 0;
            for ( int y_ind = 0; y_ind < this.y_size; ++y_ind )
            {
                for ( int x_ind = 0; x_ind < this.x_size; ++x_ind )
                {
                    if (this.my_filed[y_ind, x_ind]) count++;
                }
            }

            return count;
        }
    }

    class Stamp
    {
        private List<Tuple<int, int>> black_cell_coordinates;
        public int x_size;
        public int y_size;

        public Stamp(string input_str)
        {
            string[] input_array = input_str.Split(';');
            this.x_size = int.Parse(input_array[0]);
            this.y_size = int.Parse(input_array[1]);

            this.black_cell_coordinates = new List<Tuple<int, int>>();
            int input_array_idx = 0;
            for ( int y_idx = 0; y_idx < this.y_size; ++y_idx )
            {
                for ( int x_idx = 0; x_idx < this.x_size; ++x_idx )
                {
                    if ( input_array[2][input_array_idx++] == '1' )
                    {
                        this.black_cell_coordinates.Add(new Tuple<int, int>(y_idx, x_idx));
                    }
                }
            }

        }

        public List<Tuple<int, int>> GetBlackCellCoordinates()
        {
            return this.black_cell_coordinates;
        }
    }
}
